cmake_minimum_required(VERSION 3.18)

set(LIBRARY_NAME "DBusMenuQtilities")
set(DBUSMENU_QT_VERSION 5 CACHE STRING "Qt version to use [default: 5]")

project(${LIBRARY_NAME}${DBUSMENU_QT_VERSION}
    VERSION      0.9.3
    LANGUAGES    CXX
    HOMEPAGE_URL "https://qtilities.github.io/libdbusmenu-qtilities"
    DESCRIPTION  "Qt implementation of the DBusMenu protocol"
)
list(APPEND CMAKE_MODULE_PATH
    "${CMAKE_SOURCE_DIR}/cmake"
    "${CMAKE_SOURCE_DIR}/cmake/modules"
)
set(CMAKE_CXX_STANDARD              17)
set(CMAKE_CXX_STANDARD_REQUIRED     ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_INCLUDE_CURRENT_DIR       ON)

option(DBUSMENU_WITH_DOC "Build Doxygen documentation [default: ON]" ON)
set(DBUSMENU_EXPORTS_PREFIX ${LIBRARY_NAME})

configure_file(scripts/${LIBRARY_NAME}.pc.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc @ONLY)
#=======================================================================================================
# Qt
#=======================================================================================================
set(CMAKE_AUTOMOC ON)
find_package(QT NAMES Qt${DBUSMENU_QT_VERSION})
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS DBus Widgets)
#=======================================================================================================
# Source files
#=======================================================================================================
include(GNUInstallDirs)
add_subdirectory(src)

# FIXME / TODO: tests and tools

#add_subdirectory(tests)
#add_subdirectory(tools)
#=======================================================================================================
# Documentation
#=======================================================================================================
if(DBUSMENU_WITH_DOC)
    include(FindQtDocsPathsAndTags)

    # FIXME: Need to use an already generated "mainpage.h" instead doing it from a Doxygen filter:
    #        the result is not directly generated by the filter from the command output.
    if(false)
        file(COPY scripts/doxymel.py
            DESTINATION ${CMAKE_BINARY_DIR}
            FILE_PERMISSIONS
                OWNER_READ
                OWNER_WRITE
                OWNER_EXECUTE
                GROUP_READ
                GROUP_EXECUTE
                WORLD_READ
                WORLD_EXECUTE
        )
        configure_file(scripts/typeparser.py ${CMAKE_BINARY_DIR} COPYONLY)
    endif()

    configure_file(scripts/Doxyfile.in   ${CMAKE_BINARY_DIR}/Doxyfile @ONLY)
    add_custom_target(doc ALL doxygen WORKING_DIRECTORY ${CMAKE_BINARY_DIR})
    install(
        DIRECTORY   ${CMAKE_BINARY_DIR}/html
        DESTINATION ${CMAKE_INSTALL_DOCDIR}
    )
endif()
#=======================================================================================================
# CMake Config files
#=======================================================================================================
include(CMakePackageConfigHelpers)

set(DBUSMENU_QTILITIES_CMAKE_PATH "${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}")
set(INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}")

configure_package_config_file("cmake/${LIBRARY_NAME}Config.cmake.in"
    "${CMAKE_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    PATH_VARS INCLUDE_INSTALL_DIR DBUSMENU_QTILITIES_CMAKE_PATH
    INSTALL_DESTINATION "${DBUSMENU_QTILITIES_CMAKE_PATH}"
)
write_basic_package_version_file("${PROJECT_NAME}ConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
    ARCH_INDEPENDENT
)
#=======================================================================================================
# Installation
#=======================================================================================================
install(
    FILES       "${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc"
    DESTINATION "${CMAKE_INSTALL_DATADIR}/pkgconfig"
)
install(
    FILES
        "${CMAKE_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
        "${CMAKE_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    DESTINATION
        "${DBUSMENU_QTILITIES_CMAKE_PATH}"
    COMPONENT
        Devel
)
install(
    TARGETS             ${PROJECT_NAME}
    EXPORT              ${PROJECT_NAME}Targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)
install(
    EXPORT      ${PROJECT_NAME}Targets
    DESTINATION ${DBUSMENU_QTILITIES_CMAKE_PATH}
)
install(
    FILES
        ${CMAKE_CURRENT_BINARY_DIR}/src/dbusmenu_export.h
        ${CMAKE_CURRENT_BINARY_DIR}/src/dbusmenu_version.h
    DESTINATION
        ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
)
